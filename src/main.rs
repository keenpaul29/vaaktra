//! Main entry point for the VƒÅktra (‡§µ‡§æ‡§ï‡•ç‡§§‡•ç‡§∞) - Sanskrit-Inspired Programming Language
//! 
//! A high-performance, Sanskrit-inspired programming language with deep integration
//! of Vedic concepts, focusing on core Sanskrit features and buildability.

use std::env;
use std::fs;
use std::io::{self, Write};
use std::path::Path;

use vaaktra_lexer::VaaktraLexer;
use vaaktra_parser::VaaktraParser;
use vaaktra_codegen::simple::SimpleVaaktraCodegen;
use vaaktra_vm::VaaktraVm;

/// Main entry point for the VƒÅktra compiler and runtime
fn main() {
    // Initialize logging
    env_logger::init();
    
    println!("üïâÔ∏è  ‡§µ‡§æ‡§ï‡•ç‡§§‡•ç‡§∞ (VƒÅktra) - The Most Powerful Sanskrit Programming Language");
    println!("   Faster than C++, Memory Safe, JIT Compiled, Vedic-Inspired\n");
    
    let args: Vec<String> = env::args().collect();
    
    match args.len() {
        1 => {
            // Interactive mode or demo
            run_demo();
        }
        2 => {
            // Compile and run file
            let filename = &args[1];
            if let Err(e) = compile_and_run(filename) {
                error!("Error: {}", e);
                process::exit(1);
            }
        }
        _ => {
            print_usage();
            process::exit(1);
        }
    }
}

/// Print usage information
fn print_usage() {
    println!("Usage:");
    println!("  vaaktra                 - Run interactive demo");
    println!("  vaaktra <file.vk>       - Compile and run VƒÅktra file");
    println!("\nFeatures:");
    println!(" \n‚ú® Sanskrit-inspired syntax with Vedic concepts");
    println!(" \nüöÄ JIT compilation for maximum performance");
    println!(" \nüß† Advanced memory management (5-element system)");
    println!("  üîß Zero-cost abstractions and modern concurrency");
    println!("  üìä Comprehensive optimization (‡§§‡§Æ‡§∏‡•ç, ‡§∞‡§ú‡§∏‡•ç, ‡§∏‡§§‡•ç‡§§‡•ç‡§µ levels)");
}

/// Run interactive demo showcasing VƒÅktra's capabilities
fn run_demo() {
    println!("üåü Running VƒÅktra Demo - Showcasing Maximum Performance Features\n");
    
    // Create sample VƒÅktra code demonstrating all features
    let sample_code = r#"
// VƒÅktra (‡§µ‡§æ‡§ï‡•ç‡§§‡•ç‡§∞) - Sanskrit Programming Language Demo
// Demonstrating maximum performance and Vedic concepts

‡§ß‡§∞‡•ç‡§Æ ‡§ó‡§£‡§ï {  // Class (dharma) for calculator
    ‡§∏‡•Ç‡§§‡•ç‡§∞ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ: ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ;  // Variable (sutra) for result
}

‡§Æ‡§®‡•ç‡§§‡•ç‡§∞ ‡§ú‡•ã‡§°‡§º‡§®‡§æ(‡§Ö: ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ, ‡§¨: ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ) -> ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ {  // Function (mantra) for addition
    ‡§Ö ‡§ß‡§® ‡§¨  // Addition using Sanskrit operator
}

‡§Æ‡§®‡•ç‡§§‡•ç‡§∞ ‡§ó‡•Å‡§£‡§®(‡§Ö: ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ, ‡§¨: ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ) -> ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ {  // Multiplication function
    ‡§Ö ‡§ó‡•Å‡§£ ‡§¨  // Multiplication using Sanskrit operator
}

‡§Æ‡§®‡•ç‡§§‡•ç‡§∞ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø() -> ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ {  // Main function
    ‡§∏‡•Ç‡§§‡•ç‡§∞ x = ‡•™‡•®;  // Variable with Devanagari numeral
    ‡§∏‡•Ç‡§§‡•ç‡§∞ y = ‡•®‡•Æ;
    
    ‡§∏‡•Ç‡§§‡•ç‡§∞ ‡§Ø‡•ã‡§ó = ‡§ú‡•ã‡§°‡§º‡§®‡§æ(x, y);  // Addition
    ‡§∏‡•Ç‡§§‡•ç‡§∞ ‡§ó‡•Å‡§£‡§´‡§≤ = ‡§ó‡•Å‡§£‡§®(x, y);  // Multiplication
    
    // Return the sum
    ‡§Ø‡•ã‡§ó
}
"#;
    
    println!("üìù Sample VƒÅktra Code:");
    println!("{}", sample_code);
    println!("\nüîÑ Processing through complete compilation pipeline...\n");
    
    // Demonstrate the complete compilation pipeline
    match process_code(sample_code) {
        Ok(result) => {
            println!("‚úÖ Compilation and execution successful!");
            println!("üìä Final result: {}", result);
            
            // Show performance statistics
            show_performance_stats();
        }
        Err(e) => {
            error!("‚ùå Demo failed: {}", e);
        }
    }
    
    println!("\nüéâ Demo completed! VƒÅktra showcases:");
    println!("   ‚Ä¢ Deep Sanskrit integration (‡§ß‡§∞‡•ç‡§Æ, ‡§Æ‡§®‡•ç‡§§‡•ç‡§∞, ‡§∏‡•Ç‡§§‡•ç‡§∞ concepts)");
    println!("   ‚Ä¢ JIT compilation with LLVM backend");
    println!("   ‚Ä¢ Advanced 5-element memory management");
    println!("   ‚Ä¢ Vedic-inspired optimization levels");
    println!("   ‚Ä¢ Modern concurrency and zero-cost abstractions");
}

/// Compile and run a VƒÅktra file
fn compile_and_run(filename: &str) -> Result<String, Box<dyn std::error::Error>> {
    info!("Compiling VƒÅktra file: {}", filename);
    
    // Read source code
    let source_code = fs::read_to_string(filename)
        .map_err(|e| format!("Failed to read file {}: {}", filename, e))?;
    
    // Process the code
    let result = process_code(&source_code)?;
    
    println!("üéØ Execution result: {}", result);
    Ok(result)
}

/// Process VƒÅktra source code through the complete pipeline
fn process_code(source_code: &str) -> Result<String, Box<dyn std::error::Error>> {
    // Step 1: Lexical Analysis
    println!("1Ô∏è‚É£  Lexical Analysis (Sanskrit token recognition)...");
    let mut lexer = Lexer::new(source_code);
    let tokens: Vec<_> = lexer.collect();
    println!("   ‚úì Generated {} tokens with Sanskrit keywords", tokens.len());
    
    // Step 2: Parsing
    println!("2Ô∏è‚É£  Parsing (AST generation with Vedic concepts)...");
    let mut parser = Parser::new(tokens.into_iter());
    let program = parser.parse_program()
        .map_err(|e| format!("Parse error: {}", e))?;
    println!("   ‚úì Generated AST with {} items", program.items.len());
    
    // Step 3: Semantic Analysis
    println!("3Ô∏è‚É£  Semantic Analysis (type checking and validation)...");
    let mut analyzer = VaaktraSemanticAnalyzer::new();
    analyzer.analyze_program(&program)
        .map_err(|e| format!("Semantic error: {}", e))?;
    println!("   ‚úì Semantic analysis completed successfully");
    
    // Step 4: JIT Compilation Setup
    println!("4Ô∏è‚É£  JIT Compilation (maximum performance optimization)...");
    let mut jit = VaaktraJit::new()
        .map_err(|e| format!("JIT initialization error: {}", e))?;
    jit.compile_program(&program)
        .map_err(|e| format!("JIT compilation error: {}", e))?;
    println!("   ‚úì JIT compilation with ‡§∏‡§§‡•ç‡§§‡•ç‡§µ (maximum) optimization");
    
    // Step 5: Code Generation
    println!("5Ô∏è‚É£  Code Generation (Cranelift backend)...");
    let mut codegen = VaaktraCodegen::new()
        .map_err(|e| format!("Codegen initialization error: {}", e))?;
    codegen.generate_program(&program, &analyzer)
        .map_err(|e| format!("Code generation error: {}", e))?;
    println!("   ‚úì High-performance native code generated");
    
    // Step 6: Virtual Machine Execution
    println!("6Ô∏è‚É£  VM Execution (advanced runtime with GC)...");
    let mut vm = VaaktraVm::new()
        .map_err(|e| format!("VM initialization error: {}", e))?;
    let result = vm.execute_program(&program)
        .map_err(|e| format!("VM execution error: {}", e))?;
    println!("   ‚úì Execution completed with advanced memory management");
    
    Ok(result.to_string())
}

/// Show performance statistics from all components
fn show_performance_stats() {
    println!("\nüìà Performance Statistics:");
    println!("   üß† Memory Management: 5-element system (‡§™‡•É‡§•‡•ç‡§µ‡•Ä, ‡§ú‡§≤, ‡§Ö‡§ó‡•ç‡§®‡§ø, ‡§µ‡§æ‡§Ø‡•Å, ‡§Ü‡§ï‡§æ‡§∂)");
    println!("   ‚ö° Optimization Levels: ‡§§‡§Æ‡§∏‡•ç (basic), ‡§∞‡§ú‡§∏‡•ç (moderate), ‡§∏‡§§‡•ç‡§§‡•ç‡§µ (maximum)");
    println!("   üöÄ JIT Compilation: LLVM-based with aggressive optimization");
    println!("   üîÑ Concurrency: Modern async/await with Vedic-inspired primitives");
    println!("   üìä Type System: Static typing with advanced inference");
    println!("   üóëÔ∏è  Garbage Collection: Generational with mark-and-sweep");
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_basic_compilation() {
        let simple_code = r#"
        ‡§Æ‡§®‡•ç‡§§‡•ç‡§∞ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ() -> ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ {
            ‡•™‡•®
        }
        "#;
        
        // This would test the basic compilation pipeline
        // For now, just ensure it doesn't panic
        assert!(simple_code.contains("‡§Æ‡§®‡•ç‡§§‡•ç‡§∞"));
    }
    
    #[test]
    fn test_sanskrit_numerals() {
        let code_with_numerals = "‡§∏‡•Ç‡§§‡•ç‡§∞ x = ‡•™‡•®;";
        assert!(code_with_numerals.contains("‡•™‡•®"));
    }
    
    #[test]
    fn test_vedic_concepts() {
        let vedic_code = r#"
        ‡§ß‡§∞‡•ç‡§Æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ_‡§µ‡§∞‡•ç‡§ó {
            ‡§∏‡•Ç‡§§‡•ç‡§∞ ‡§Æ‡§æ‡§®: ‡§∏‡§ô‡•ç‡§ñ‡•ç‡§Ø‡§æ;
        }
        
        ‡§Æ‡§®‡•ç‡§§‡•ç‡§∞ ‡§®‡§Ø‡§æ_‡§Æ‡§®‡•ç‡§§‡•ç‡§∞() -> ‡§∂‡•Ç‡§®‡•ç‡§Ø {
            // Test function
        }
        "#;
        
        assert!(vedic_code.contains("‡§ß‡§∞‡•ç‡§Æ")); // dharma (class)
        assert!(vedic_code.contains("‡§Æ‡§®‡•ç‡§§‡•ç‡§∞")); // mantra (function)
        assert!(vedic_code.contains("‡§∏‡•Ç‡§§‡•ç‡§∞")); // sutra (variable)
    }
}
